# -*- coding: utf-8 -*-
"""EDA Submission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U8r4EBUdYNow3rvH3Ie_H9JeuKIi9QgI

# **Telecom Churn Analysis**

##### **Project Type**    - EDA
##### **Contribution**    - Individual

# **Project Summary -**

Orange S.A., formerly France Télécom S.A., is a French multinational telecommunications corporation. The Orange Telecom's Churn Dataset, consists of cleaned customer activity data (features), along with a churn label specifying whether a customer cancelled the subscription. We are trying to explore and analyze the data to discover key factors responsible for customer churn and to come up with ways/recommendations to ensure customer retention.

# **GitHub Link -**

Provide your GitHub Link here.

# **Problem Statement**

**Come up with the data insights form the dataset to retain the customers.**

# ***Let's Begin !***

## ***1. Know Your Data***

### Import Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
# %matplotlib inline
#sets the output inline with the matplotlib backend inline

import seaborn as sns

"""### Dataset Loading"""

# Firstly we will mount the drive to load the dataset
from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Alma Better/Module 1 --- Python for data science/Ch_5 Exploratory Data Analysis/Capstone Project/Telecom Churn.csv")

"""### Dataset First View"""

df.head()

"""### Dataset Rows & Columns count"""

df.shape

#output shows our dataset has 3333 rows and 20 columns

"""### Dataset Information"""

# Use df.info to get general information about the dataset

df.info()

"""#From this output we get to see that -
#####1 There are 20 different columns with no null values.
#####2 Each column has 3333 rows
#####3 data type associated with each columns

#### Duplicate Values
"""

# Dataset Duplicate Value Count
# Majority of the values in the dataset are statstical values except "International plan","Voice mail plan" and "Churn"

#International Plan --- check the value count
df['International plan'].value_counts()

#Voice mail plan --- check the value count
df['Voice mail plan'].value_counts()

#Churn --- check the value count
df['Churn'].value_counts()

"""#### Missing Values/Null Values"""

# Missing Values/Null Values Count

#As we have seen in df.info method. There are no null or missing values.

"""### What did you know about your dataset?

####1 There are 20 columns and 3333 rows in the dataset.
####2 There are no null values.
####3 "Churn" is the label and others are the feature elements.

## ***2. Understanding Your Variables***
"""

# Dataset Columns

df.columns

# Dataset Describe


df.describe()

"""## 3. ***Data Wrangling***

### Data Wrangling Code
"""

# Write your code to make your dataset analysis ready.

#We will try to make the analysis based on the labels and try to compare

# 1 Groupby data data based on the labels and see the distribution based on the region/states

df_regions_true = df[df['Churn'] == True]

ax = df_regions_true.State.value_counts().plot()

ax.set_title('True value distribution')
ax.set_xlabel('Regions')
ax.set_ylabel('count')

df_regions_false = df[df['Churn'] == False]

ax = df_regions_false.State.value_counts().plot()

ax.set_title('False value distribution')
ax.set_xlabel('Regions')
ax.set_ylabel('count')

"""###From the above charts we get to know that Churning is high in Nj state and low in wv state

## Based on the True value lets try to analyze morning and evening stats
"""

# True values analysis - day
df_regions_true

total_day_minutes_true = df_regions_true['Total day minutes'].mean()
print("Total number of average minutes in a day - ",total_day_minutes_true)


total_day_calls_true = df_regions_true['Total day calls'].mean()
print("Total number of average calls per day - ",total_day_calls_true)

total_day_charge_true = df_regions_true['Total day charge'].mean()
print("Total number of average charge per day - ",total_day_charge_true)

# False values analysis - day

df_regions_false

total_day_minutes_false = df_regions_false['Total day minutes'].mean()
print("Total number of average minutes in a day - ",total_day_minutes_false)


total_day_calls_false = df_regions_false['Total day calls'].mean()
print("Total number of average calls per day - ",total_day_calls_false)

total_day_charge_false = df_regions_false['Total day charge'].mean()
print("Total number of average charge per day - ",total_day_charge_false)

# True values analysis - eve
df_regions_true

total_eve_minutes_true = df_regions_true['Total eve minutes'].mean()
print("Total number of average minutes in a eve - ",total_eve_minutes_true)


total_eve_calls_true = df_regions_true['Total eve calls'].mean()
print("Total number of average calls per eve - ",total_eve_calls_true)

total_eve_charge_true = df_regions_true['Total eve charge'].mean()
print("Total number of average charge per eve - ",total_eve_charge_true)

# False values analysis - eve
df_regions_false

total_eve_minutes_false = df_regions_false['Total eve minutes'].mean()
print("Total number of average minutes in a eve - ",total_eve_minutes_false)


total_eve_calls_false = df_regions_false['Total eve calls'].mean()
print("Total number of average calls per eve - ",total_eve_calls_false)

total_eve_charge_false = df_regions_false['Total eve charge'].mean()
print("Total number of average charge per eve - ",total_eve_charge_false)

# True values analysis - eve
df_regions_true

total_eve_minutes_true = df_regions_true['Total eve minutes'].mean()
print("Total number of average minutes in a eve - ",total_eve_minutes_true)


total_eve_calls_true = df_regions_true['Total eve calls'].mean()
print("Total number of average calls per eve - ",total_eve_calls_true)

total_eve_charge_true = df_regions_true['Total eve charge'].mean()
print("Total number of average charge per eve - ",total_eve_charge_true)

df.columns

# False values analysis - night
df_regions_false

total_night_minutes_false = df_regions_false['Total night minutes'].mean()
print("Total number of average minutes in a eve - ",total_night_minutes_false)


total_night_calls_false = df_regions_false['Total night calls'].mean()
print("Total number of average calls per eve - ",total_night_calls_false)

total_night_charge_false = df_regions_false['Total night charge'].mean()
print("Total number of average charge per eve - ",total_night_charge_false)

# True values analysis - night
df_regions_true

total_night_minutes_true = df_regions_true['Total night minutes'].mean()
print("Total number of average minutes in a eve - ",total_night_minutes_true)


total_night_calls_true = df_regions_true['Total night calls'].mean()
print("Total number of average calls per eve - ",total_night_calls_true)

total_night_charge_true = df_regions_true['Total night charge'].mean()
print("Total number of average charge per eve - ",total_night_charge_true)

# False values analysis - intl
df_regions_false

total_intl_minutes_false = df_regions_false['Total intl minutes'].mean()
print("Total number of average minutes in a intl - ",total_intl_minutes_false)


total_intl_calls_false = df_regions_false['Total intl calls'].mean()
print("Total number of average calls per intl - ",total_intl_calls_false)

total_intl_charge_false = df_regions_false['Total intl charge'].mean()
print("Total number of average charge per intl - ",total_intl_charge_false)

# True values analysis - intl
df_regions_true

total_intl_minutes_true = df_regions_true['Total intl minutes'].mean()
print("Total number of average minutes in a eve - ",total_intl_minutes_true)


total_intl_calls_true = df_regions_true['Total intl calls'].mean()
print("Total number of average calls per eve - ",total_intl_calls_true)

total_intl_charge_true = df_regions_true['Total intl charge'].mean()
print("Total number of average charge per eve - ",total_intl_charge_true)

labels = ['True','False']
values_minutes_day = [total_day_minutes_true,total_day_minutes_false]
values_minutes_eve = [total_eve_minutes_true,total_eve_minutes_false]
values_minutes_night = [total_night_minutes_true,total_night_minutes_false]
values_minutes_intl = [total_intl_minutes_true,total_intl_minutes_false]

plt.rcParams['figure.figsize'] = (10, 5)
plt.subplot(2,2,1)
plt.bar(labels,values_minutes_day)
plt.title('Day')

plt.subplot(2,2,2)
plt.bar(labels,values_minutes_eve)
plt.title('Eve')

plt.subplot(2,2,3)
plt.bar(labels,values_minutes_night)
plt.title('Eve')


plt.subplot(2,2,4)
plt.bar(labels,values_minutes_intl)
plt.title('Intl')

labels = ['True','False']
values_calls_day = [total_day_calls_true,total_day_calls_false]
values_calls_eve = [total_eve_calls_true,total_eve_calls_false]
values_calls_night = [total_night_calls_true,total_night_calls_false]
values_calls_intl = [total_intl_calls_true,total_intl_calls_false]

plt.rcParams['figure.figsize'] = (10, 5)
plt.subplot(2,2,1)
plt.bar(labels,values_calls_day)
plt.title('Day')

plt.subplot(2,2,2)
plt.bar(labels,values_calls_eve)
plt.title('Eve')


plt.subplot(2,2,3)
plt.bar(labels,values_calls_night)
plt.title('Night')


plt.subplot(2,2,4)
plt.bar(labels,values_calls_intl)
plt.title('intl')

labels = ['True','False']
values_charge_day = [total_day_charge_true,total_day_charge_false]
values_charge_eve = [total_eve_charge_true,total_eve_charge_false]
values_charge_night = [total_night_charge_true,total_night_charge_false]
values_charge_intl = [total_intl_charge_true,total_intl_charge_false]

plt.rcParams['figure.figsize'] = (10, 5)
plt.subplot(2,2,1)
plt.bar(labels,values_charge_day)
plt.title('Day')

plt.subplot(2,2,2)
plt.bar(labels,values_charge_eve)
plt.title('Eve')


plt.subplot(2,2,3)
plt.bar(labels,values_charge_night)
plt.title('Night')


plt.subplot(2,2,4)
plt.bar(labels,values_charge_intl)
plt.title('Intl')

df_regions_true.describe()

df_regions_false.describe()

# True label per call cost

day_charge = df_regions_true['Total day charge'].sum()/df_regions_true['Total day minutes'].sum()
print('day charge per call is --- ',day_charge)

eve_charge = df_regions_true['Total eve charge'].sum()/df_regions_true['Total eve minutes'].sum()
print('eve charge per call is --- ',eve_charge)

night_charge = df_regions_true['Total night charge'].sum()/df_regions_true['Total night minutes'].sum()
print('night charge per call is --- ',night_charge)

intl_charge = df_regions_true['Total intl charge'].sum()/df_regions_true['Total intl minutes'].sum()
print('intl charge per call is --- ',intl_charge)

# False label per call cost

day_charge = df_regions_false['Total day charge'].sum()/df_regions_false['Total day minutes'].sum()
print('day charge per call is --- ',day_charge)

eve_charge = df_regions_false['Total eve charge'].sum()/df_regions_false['Total eve minutes'].sum()
print('eve charge per call is --- ',eve_charge)

night_charge = df_regions_false['Total night charge'].sum()/df_regions_false['Total night minutes'].sum()
print('night charge per call is --- ',night_charge)

intl_charge = df_regions_false['Total intl charge'].sum()/df_regions_false['Total intl minutes'].sum()
print('intl charge per call is --- ',intl_charge)

# Analysis based on the voice mail plan
vm_analysis_false = df_regions_false['Voice mail plan'].value_counts()
print(vm_analysis_false)

vm_analysis_true = df_regions_true['Voice mail plan'].value_counts()
print(vm_analysis_true)

# Analysis Based on the Internationall Plans
ip_analysis_false = df_regions_false['International plan'].value_counts()
print(ip_analysis_false)

ip_analysis_true = df_regions_true[df['International plan'] == 'Yes']
ip_analysis_true.describe()

# Analysis based on the Customer service calls

df_regions_true['Customer service calls'].value_counts().sort_values()

df_regions_false['Customer service calls'].value_counts().sort_values()

"""# **Conclusion**

- Dataset variables do not form any direct/linear relationship with label
- Customers from region "NJ" tend to churn more. Focusing on network infrastructure would help in reduce churning.
- Call charge for international call and day call is 0.17/min and 0.27/min resepectively. Revisiting these may help in redcing customer churn.
- Customer's with more day and evening calls tend to churn more.
- Customer with more frequency of customer service calls tend to churn more.

### ***Hurrah! You have successfully completed your EDA Capstone Project !!!***
"""